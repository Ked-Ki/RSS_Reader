Terminal-Based RSS Reader 
author: Kevin Freese
date: 3/22/13

Check www.github.com/Ked-Ki/RSS_Reader for updates!

__________________________________Description__________________________________
This program is a rudimentary RSS feed reader, to be run in a terminal command
line. Can read Atom and RSS feeds. In addition, this reader can import your
subscription list from Google Reader.

__________________________Importing Google Reader Data_________________________
Run the script with the keyword "import" and the subscriptions.xml file from 
Google Reader. 

Example: 
./rss.py import ./[google-username]@gmail.com-takeout/Reader/subscriptions.xml
                ____________________________________________
                | Don't have your data from Google Reader? |
                | Go to https://www.google.com/takeout/    |
                | to download your Google Reader data.     |
                --------------------------------------------

Now, the program will transfer your Google Reader subscription file into a new
file and format for this program to run. After that, it'll begin building a 
read history file, and once that is complete, will display all new items, 
followed by a prompt for regular runtime commands (listed in Usage section).

_____________________________________Usage_____________________________________
Run the script without any arguments (./rss.py) to start a normal run.

After the script is started, some initialization will occur, followed by a
check of all the feeds that you are subscribed to.

After that, a prompt will display. The following commands are accepted:

'check [name]':      This command checks for new updates. With a name field, 
                     it checks the feed named. Without a name field, it checks
                     all feeds.

'read {name}':       Typing this command requires a {name} field. This will
                     result in opening a page with the contents of the oldest
                     item in the feed named.

'readall [name]':    Just like read, except it opens pages for each of the
                     unread items in the feed with [name]. If run without a
                     [name], it reads all items in all feeds.

'readitem {name}':   This command allows you to read a specific item in a 
                     feed. After the command is read, a list of items in all
                     feeds matching the query {name} will appear, with a
                     number next to each. Type the number next to an item to
                     read it.
 
'mark {name}':       This command marks an item as read without opening it.

'markall [name]:     This command marks all items in the feed [name] as read.
                     If no name is supplied, this marks all items from all 
                     feeds read.

'subscribe {url}':   Typing this command will add a new feed to your
                     subscription list, and this feed will be included in
                     every future check.

'unsubscribe {name}: This command removes a feed from your subscription list. 

'list':              Displays a list of all feeds you're subscribed to.

'help':              Displays a brief description of some commands' usage.

'quit':              Exits the reader and returns to the shell.


*For all feeds which require a feed name, any substring of the feed title will
 work. Note, though, if your input is too vague, this may perform the action on
 more than one feed. (i.e. Typing 'read e' will open all new items for every 
 feed with an 'e' in the title)

____________________________________Options____________________________________
All data for the program is saved in ~/.RSS_Reader_Data. Also in that directory
is a file entitled options.py, which contain the following options:

subscription_file:   This is the filename for your subscription list.

history_file:        This is the filename for your read history.

read_items_folder:   This is the folder where the html files for the items
                     being read go. Always a subdirectory of ~/.RSS_Reader_Data

updatelen:           How far back you want subscribe and newly built read
                     histories to show items, in days.
